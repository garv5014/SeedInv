1. automated test case: This is a system that is used to enable programmers to automatically test different elements of their programs. I used docTest to test auto-test some elements of my program. There probably a lot more things that could have been tested but that I didn’t feel were as necessary 
2. a class definition: A user-defined class is a data structure that encapsulates the data members with functions allowing data Hiding. The first class Definition I have is the Seed class It holds the very basics of a Seed such as the seeds name and it has a LotNumber member which is another class I made. 
3. a second class definition: A user-defined class is a data structure that encapsulates the data members with functions allowing data Hiding. The second class I have is lotNumber class The lot number class holds all the needed info that comes with a lot number such as its original weight its current weight pounds per bag and its lot Name. It also knows how to display its info and adjust its current weight
4. a third-class definition: A user-defined class is a data structure that encapsulates the data members with functions allowing data Hiding. My third class is the child of the exception class called Weight exception. This class also has two children class that handle two different weight-based exceptions
5. Inheritance: this is the “is-a” relationship that allows one class to inherit traits from its parent class. I use this in my program with my exception class I have one class that inherits from std exception called WeightException and then two other classes inherit from WeightException. 
6. Polymorphism: This is the ability that allows children classes of an abstract class to override functions of the parent class. In my program this can be seen with the exception class where weight exception has two children but each child can independently define the what() function
7. Exceptions: include the identifying and handling exceptions that are not related to the debugging of the program and are normally things that the user might try and do the don’t make logical sense. I use exceptions in my program so that user can’t take out more seed then there is in inventory and so they cannot add more seed then the original weight
8. Recursion: This is a way to approach a problem by breaking it into a task that can be repeated eventually approaching a solution using the same steps. I honestly couldn’t think of a way to implement recursion in my program. While one might be able to complete some of the same functions as are in my program with recursion. I don’t see how it could be more efficient or easier to think about if done that way. But I did use it when we did the Merge sort lab.
9. use of an STL container: These are the standard library containers. They are basically objects that have the ability to store data and other objects. I use vectors in my maindriver to store the inventory at run time. The vector is a vector of seed pointers.
10. const member functions: These are functions that aren’t allowed to change the data inside the function. I use These a lot. Mainly for the getters and display functions.
11. static member function: This is a member function of a class that is shared across all instances of that class. I use this for the makeInventory in my Seed class.
12. data hiding: This is a form of abstraction to try to hide objects’ details from the users allowing them to focus more on the uses of the objects rather than the details. I have data hiding in my Seed and LotNumber classes.
13. assignment operator (remember to check for self-assignment):  overloading The assignment operator basically allows you to assign one object to be equal to another which is necessary for some functions of the stl containers. I have the assignment operators overloaded in the Seed class and the lot number class
14. copy constructor (remember to pass by const-reference): This is the constructor that initializes an object of the same class. I have them in my Seed and LotNumber classes but I can’t think of a specific time that I needed to use them in the main driver.
15. Destructor: This is the part of the class that is responsible for clearing up all the space that the class took up once the class is no longer in use. Each of my classes has one but they are just default destructors.